if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" disable vi compatibility
set nocompatible

call plug#begin('~/.vim/plugged')

" add vim-plug for helpfiles
Plug 'junegunn/vim-plug'

Plug 'ziglang/zig.vim'

"vimwiki
Plug 'vimwiki/vimwiki'
" PICO-8
Plug 'junkdeck/vim-pico8-syntax'
Plug 'junkdeck/pico8-vim-colorscheme'
" == GENERIC-USE / AUGMENTING PLUGINS
Plug 'janko/vim-test'
Plug 'w0rp/ale'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'vim-scripts/L9'
Plug 'chriskempson/base16-vim'
Plug 'Yggdroot/LeaderF'
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-unimpaired'
Plug 'jiangmiao/auto-pairs'
Plug 'wellle/targets.vim'
Plug 'SirVer/ultisnips'
Plug 'junkdeck/vim-snippets'
Plug 'easymotion/vim-easymotion'
Plug 'aykamko/vim-easymotion-segments'
Plug 'tomtom/tcomment_vim'
Plug 'tmhedberg/matchit'
Plug 'chaoren/vim-wordmotion'
Plug 'editorconfig/editorconfig-vim'
Plug 'habamax/vim-godot'
Plug 'junegunn/fzf', { 'do': { -> fzf#install } }
Plug 'junegunn/fzf.vim'

" == WEB DEVELOPMENT PLUGINS ==
Plug 'burner/vim-svelte'
Plug 'tpope/vim-rails'
Plug 'mattn/emmet-vim'
Plug 'nelsyeung/twig.vim'

" == SYNTAX / HIGHLIGHTING  ==
Plug 'alexlafroscia/postcss-syntax.vim'
Plug 'agfline/c-syntax.vim'
Plug 'moll/vim-node'
Plug 'pangloss/vim-javascript'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'isRuslan/vim-es6'
Plug 'Quramy/vim-js-pretty-template'
Plug 'styled-components/vim-styled-components', {'branch': 'main'}
Plug 'hail2u/vim-css3-syntax'

" All plugins must be added before following line
call plug#end()

" CUSTOM FUNCTIONS
" HTML-TAG AUTOINDENT ON <CR>
" snippet from https://stackoverflow.com/a/18066591/4881742
function! Expander()
  let line    = getline(".")
  let col     = col(".")
  let first   = line[col-2]
  let second  = line[col-1]
  let third   = line[col]

  if first ==# ">"
    if second ==# "<" && third ==# "/"
      return "\<CR>\<C-o>==\<C-o>O"
    else
      return "\<CR>"
    endif
  else
    return "\<CR>"
  endif
endfunction

function! Pico8Loader()
  if match(&filetype, '\v(lua|p8)') != -1
    execute "silent !xdotool search --class pico key \"ctrl+r\""
  endif
endfunction

set rtp+=~/.fzf

" == CORE FUNCTIONALITY CONFIGURATION ==
" hybrid line numbers, display current line as absolute, rest as relative
set number relativenumber
" reload files changed outside vim
set autoread
" utf-8 encoding
set encoding=utf-8
set fileencoding=utf-8
" screen will not be redrawn while running non-typed commands
set lazyredraw
" set gui font for gvim
set guifont=Terminus
" 256 color term support
set t_Co=256
" find next match as it's typed
set incsearch
" highlight search matches
set hlsearch
" keep the cursor within 3 lines when scrolling
set scrolloff=4
" backspace fix
set backspace=indent,eol,start
" indentation
set expandtab         " spaces instead of tabs
set autoindent        " autoindents based on above
set tabstop=2         " inserts x spaces when tab is pressed
set softtabstop=2     " insert-mode, xspace tabs
set shiftwidth=2      " indentation space characters
" tab characters
set list
set listchars=tab:\|Â·
" lightline fix
set laststatus=2
" remove redundant '-- INSERT --', thanks lightline
set noshowmode
" case insensitive search - use \C for sensitive
set ignorecase
" ignores case on lowercase, case sensitive on uppercase
set smartcase
" enable motions for tilde (case operator)
set tildeop
" highlight current cursor position
set cursorline
" enables persistent undo per-file
set undofile
set undodir=~/.config/nvim/undodir
" sets window title to current file
set title
" open Gdiff in vertical split
set diffopt+=vertical
" set color scheme
let base16colorspace=256
colorscheme base16-gruvbox-dark-soft
" disables opague background
hi Normal ctermbg=none
hi NonText ctermbg=none

" == PLUGIN CONFIGURATION ==
" let vim-ack use Ag (if exists)
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" Enable deoplete
let g:deoplete#enable_at_startup = 1

" sets jsx Component brackets to same color as component name
hi link jsxCloseString Function

" vim-prettier setup
let g:prettier#config#print_width = 80
let g:prettier#exec_cmd_async = 1 " asynchronous formatting
let g:prettier#autoformat = 0 " disable formatting off iles that have @format tag
" autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync
"let g:prettier#config#use_tabs = 'true' "ugh use tabs instead of spaces
let g:prettier#config#tab_width = 2
let g:prettier#config#semi = 'false'
let g:prettier#config#bracket_spacing = 'false'
" vim-jsx works on js files and jsx
let g:jsx_ext_required = 0
" vim-glsl 
let g:glsl_file_extensions = '*.shader'
" UltiSnips options
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<C-b>"
let g:UltiSnipsJumpBackwardTrigger="<C-z>"
let g:UltiSnipsEditSplit="vertical"
" redefine emmet key - trailing , still needed!
let g:user_emmet_leader_key='<C-e>'
" let emmet expand class to className in jsx files
let g:user_emmet_settings = {
  \'javascript.jsx':{
  \ 'extends': 'jsx'
  \}
\}
" lightline setup - colorscheme and branch name
let g:lightline = {
  \'colorscheme':'nord',
  \'active': {
  \  'left': [['mode', 'paste'],
  \  ['gitbranch', 'readonly', 'filename', 'modified']]
  \},
  \'component_function': {
  \'gitbranch': 'fugitive#head'
  \},
\}

" ALE config
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1

" let g:ale_javascript_eslint_use_global = 1
" let g:ale_javascript_eslint_executable = 'eslint_d'
" let g:ale_javascript_eslint_options = ''

let g:ale_linter_aliases = {'svelte': ['css', 'javascript']}

let g:ale_linters = {
\ 'javascript': ['eslint'],
\ 'javascript.jsx': ['eslint'],
\ 'ruby': ['standardrb'],
\ 'css': ['prettier'],
\ 'scss': ['prettier'],
\ 'html': ['prettier'],
\ 'svelte': ['stylelint', 'eslint']
\}

let g:ale_fixers = {
\ 'javascript': ['eslint', 'prettier'],
\ 'javascript.jsx': ['eslint', 'prettier'],
\ 'vue': ['prettier'],
\ 'ruby': ['standardrb'],
\ 'css': ['prettier'],
\ 'scss': ['prettier'],
\ 'html': ['prettier'],
\ 'c':  ['clang-format'],
\ 'svelte': ['eslint', 'prettier', 'prettier_standard']
\}

let g:ale_set_signs = 0
let g:ale_disable_lsp = 1

" set ALE highlighting to a more sensible color
hi link ALEError Error
hi link ALEWarning WildMenu


" Automatically set Javascript files as JSX
augroup filetype_jsx
  autocmd!
  autocmd FileType javascript set filetype=javascript.jsx
augroup END

" only show relative line numbers in active window and insert mode
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter * set norelativenumber
augroup END

" update a running PICO-8 program on save
autocmd BufWritePost * call Pico8Loader()
" == KEY MAPPING ==
" launch love in current directory
nnoremap <leader>l :silent !love .<CR>
" vim test maps
nmap <silent> <leader>tn :w<CR>:TestNearest<CR>
nmap <silent> <leader>tf :w<CR>:TestFile<CR>
nmap <silent> <leader>ts :w<CR>:TestSuite<CR>
" fugitive maps
nnoremap <leader>ga :Git add %:p<CR><CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit -v -q<CR>
nnoremap <leader>gt :Gcommit -v -q %:p<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>ge :Gedit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR><CR>
nnoremap <leader>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <leader>gp :Ggrep<Space>
nnoremap <leader>gm :Gmove<Space>
nnoremap <leader>gb :Gblame<CR>
nnoremap <leader>go :Git checkout<Space>
nnoremap <leader>gps :Dispatch! git push<CR>
nnoremap <leader>gpl :Dispatch! git pull<CR>
" Ack leader
nnoremap <Leader>a :Ag<Space>
" Quickfix mappings
nnoremap <Leader>co :copen<CR>
nnoremap <Leader>cc :cclose<CR>
" remove search highlight
nnoremap <Leader>n :noh<CR>
" window manipulation maps
map - <C-w>-
map + <C-w>+
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-h> <C-w>h
map <C-l> <C-w>l
" temporarily remove search highlighting
" nnoremap <CR> :noh<CR>
" map Expander to <CR> in insert mode
inoremap <expr> <CR> Expander()
" * doesnt jump forward
nnoremap * *``
" terminal mapping
tnoremap <Esc> <C-\><C-n> " exits terminal mode
"ALE MAPPINGS
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

nnoremap <silent> <A-l> :w<CR> :silent !love . <CR>
" == COMMAND ==
command AbsSource %s/\(\.\.\/\)\+/src\//g
